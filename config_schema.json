{
  "$defs": {
    "AnchorPoint": {
      "description": "A model for describing an anchor point for the specified target class.",
      "properties": {
        "target_class": {
          "description": "The name of the class to be targeted.",
          "title": "Target Class",
          "type": "string"
        },
        "identifier_slot": {
          "description": "The name of the slot in the target class that is used as identifier.",
          "title": "Identifier Slot",
          "type": "string"
        },
        "root_slot": {
          "description": "The name of the slot in the root class used to link to the target class.",
          "title": "Root Slot",
          "type": "string"
        }
      },
      "required": [
        "target_class",
        "identifier_slot",
        "root_slot"
      ],
      "title": "AnchorPoint",
      "type": "object"
    },
    "ArtifactInfo": {
      "description": "Model to describe general information on an artifact.\nPlease note, it does not contain actual artifact instances derived from specific\nmetadata.",
      "properties": {
        "name": {
          "description": "The name of the artifact.",
          "title": "Name",
          "type": "string"
        },
        "description": {
          "description": "A description of the artifact.",
          "title": "Description",
          "type": "string"
        },
        "resource_classes": {
          "additionalProperties": {
            "$ref": "#/$defs/ArtifactResourceClass"
          },
          "description": "A dictionary of resource classes for this artifact. The keys are the names of the classes. The values are the corresponding class models.",
          "title": "Resource Classes",
          "type": "object"
        }
      },
      "required": [
        "name",
        "description",
        "resource_classes"
      ],
      "title": "ArtifactInfo",
      "type": "object"
    },
    "ArtifactResourceClass": {
      "description": "Model to describe a resource class of an artifact.",
      "properties": {
        "name": {
          "description": "The name of the metadata class.",
          "title": "Name",
          "type": "string"
        },
        "description": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "default": null,
          "description": "A description of the metadata class.",
          "title": "Description"
        },
        "anchor_point": {
          "allOf": [
            {
              "$ref": "#/$defs/AnchorPoint"
            }
          ],
          "description": "The anchor point for this metadata class."
        },
        "json_schema": {
          "description": "The JSON schema for this metadata class.",
          "title": "Json Schema",
          "type": "object"
        }
      },
      "required": [
        "name",
        "anchor_point",
        "json_schema"
      ],
      "title": "ArtifactResourceClass",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "description": "Modifies the orginal Settings class provided by the user",
  "properties": {
    "db_connection_str": {
      "description": "MongoDB connection string. Might include credentials. For more information see: https://naiveskill.com/mongodb-connection-string/",
      "examples": [
        "mongodb://localhost:27017"
      ],
      "format": "password",
      "title": "Db Connection Str",
      "type": "string",
      "writeOnly": true
    },
    "db_name": {
      "description": "Name of the database located on the MongoDB server.",
      "examples": [
        "my-database"
      ],
      "title": "Db Name",
      "type": "string"
    },
    "service_name": {
      "default": "metldata",
      "title": "Service Name",
      "type": "string"
    },
    "service_instance_id": {
      "description": "A string that uniquely identifies this instance across all instances of this service. A globally unique Kafka client ID will be created by concatenating the service_name and the service_instance_id.",
      "examples": [
        "germany-bw-instance-001"
      ],
      "title": "Service Instance Id",
      "type": "string"
    },
    "kafka_servers": {
      "description": "A list of connection strings to connect to Kafka bootstrap servers.",
      "examples": [
        [
          "localhost:9092"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Kafka Servers",
      "type": "array"
    },
    "kafka_security_protocol": {
      "default": "PLAINTEXT",
      "description": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL.",
      "enum": [
        "PLAINTEXT",
        "SSL"
      ],
      "title": "Kafka Security Protocol",
      "type": "string"
    },
    "kafka_ssl_cafile": {
      "default": "",
      "description": "Certificate Authority file path containing certificates used to sign broker certificates. If a CA is not specified, the default system CA will be used if found by OpenSSL.",
      "title": "Kafka Ssl Cafile",
      "type": "string"
    },
    "kafka_ssl_certfile": {
      "default": "",
      "description": "Optional filename of client certificate, as well as any CA certificates needed to establish the certificate's authenticity.",
      "title": "Kafka Ssl Certfile",
      "type": "string"
    },
    "kafka_ssl_keyfile": {
      "default": "",
      "description": "Optional filename containing the client private key.",
      "title": "Kafka Ssl Keyfile",
      "type": "string"
    },
    "kafka_ssl_password": {
      "default": "",
      "description": "Optional password to be used for the client private key.",
      "title": "Kafka Ssl Password",
      "type": "string"
    },
    "generate_correlation_id": {
      "default": true,
      "description": "A flag, which, if False, will result in an error when inbound requests don't possess a correlation ID. If True, requests without a correlation ID will be assigned a newly generated ID in the correlation ID middleware function.",
      "examples": [
        true,
        false
      ],
      "title": "Generate Correlation Id",
      "type": "boolean"
    },
    "primary_artifact_name": {
      "description": "Name of the artifact from which the information for outgoing change events is derived.",
      "examples": [
        "embedded_public"
      ],
      "title": "Primary Artifact Name",
      "type": "string"
    },
    "primary_dataset_name": {
      "description": "Name of the resource class corresponding to the embedded_dataset slot.",
      "examples": [
        "EmbeddedDataset"
      ],
      "title": "Primary Dataset Name",
      "type": "string"
    },
    "resource_change_event_topic": {
      "description": "Name of the topic used for events informing other services about resource changes, i.e. deletion or insertion.",
      "examples": [
        "searchable_resources"
      ],
      "title": "Resource Change Event Topic",
      "type": "string"
    },
    "resource_deletion_event_type": {
      "description": "Type used for events indicating the deletion of a previously existing resource.",
      "examples": [
        "searchable_resource_deleted"
      ],
      "title": "Resource Deletion Event Type",
      "type": "string"
    },
    "resource_upsertion_type": {
      "description": "Type used for events indicating the upsert of a resource.",
      "examples": [
        "searchable_resource_upserted"
      ],
      "title": "Resource Upsertion Type",
      "type": "string"
    },
    "dataset_change_event_topic": {
      "description": "Name of the topic announcing, among other things, the list of files included in a new dataset.",
      "examples": [
        "metadata_datasets"
      ],
      "title": "Dataset Change Event Topic",
      "type": "string"
    },
    "dataset_deletion_type": {
      "description": "Type used for events announcing a new dataset overview.",
      "examples": [
        "dataset_deleted"
      ],
      "title": "Dataset Deletion Type",
      "type": "string"
    },
    "dataset_upsertion_type": {
      "description": "Type used for events announcing a new dataset overview.",
      "examples": [
        "dataset_created"
      ],
      "title": "Dataset Upsertion Type",
      "type": "string"
    },
    "host": {
      "default": "127.0.0.1",
      "description": "IP of the host.",
      "title": "Host",
      "type": "string"
    },
    "port": {
      "default": 8080,
      "description": "Port to expose the server on the specified host",
      "title": "Port",
      "type": "integer"
    },
    "auto_reload": {
      "default": false,
      "description": "A development feature. Set to `True` to automatically reload the server upon code changes",
      "title": "Auto Reload",
      "type": "boolean"
    },
    "workers": {
      "default": 1,
      "description": "Number of workers processes to run.",
      "title": "Workers",
      "type": "integer"
    },
    "api_root_path": {
      "default": "",
      "description": "Root path at which the API is reachable. This is relative to the specified host and port.",
      "title": "Api Root Path",
      "type": "string"
    },
    "openapi_url": {
      "default": "/openapi.json",
      "description": "Path to get the openapi specification in JSON format. This is relative to the specified host and port.",
      "title": "Openapi Url",
      "type": "string"
    },
    "docs_url": {
      "default": "/docs",
      "description": "Path to host the swagger documentation. This is relative to the specified host and port.",
      "title": "Docs Url",
      "type": "string"
    },
    "cors_allowed_origins": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "A list of origins that should be permitted to make cross-origin requests. By default, cross-origin requests are not allowed. You can use ['*'] to allow any origin.",
      "examples": [
        [
          "https://example.org",
          "https://www.example.org"
        ]
      ],
      "title": "Cors Allowed Origins"
    },
    "cors_allow_credentials": {
      "anyOf": [
        {
          "type": "boolean"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Indicate that cookies should be supported for cross-origin requests. Defaults to False. Also, cors_allowed_origins cannot be set to ['*'] for credentials to be allowed. The origins must be explicitly specified.",
      "examples": [
        [
          "https://example.org",
          "https://www.example.org"
        ]
      ],
      "title": "Cors Allow Credentials"
    },
    "cors_allowed_methods": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "A list of HTTP methods that should be allowed for cross-origin requests. Defaults to ['GET']. You can use ['*'] to allow all standard methods.",
      "examples": [
        [
          "*"
        ]
      ],
      "title": "Cors Allowed Methods"
    },
    "cors_allowed_headers": {
      "anyOf": [
        {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "A list of HTTP request headers that should be supported for cross-origin requests. Defaults to []. You can use ['*'] to allow all headers. The Accept, Accept-Language, Content-Language and Content-Type headers are always allowed for CORS requests.",
      "examples": [
        []
      ],
      "title": "Cors Allowed Headers"
    },
    "artifact_infos": {
      "description": "Information for artifacts to be queryable via the Artifacts REST API.",
      "items": {
        "$ref": "#/$defs/ArtifactInfo"
      },
      "title": "Artifact Infos",
      "type": "array"
    },
    "loader_token_hashes": {
      "description": "Hashes of tokens used to authenticate for loading artifact.",
      "items": {
        "type": "string"
      },
      "title": "Loader Token Hashes",
      "type": "array"
    }
  },
  "required": [
    "db_connection_str",
    "db_name",
    "service_instance_id",
    "kafka_servers",
    "primary_artifact_name",
    "primary_dataset_name",
    "resource_change_event_topic",
    "resource_deletion_event_type",
    "resource_upsertion_type",
    "dataset_change_event_topic",
    "dataset_deletion_type",
    "dataset_upsertion_type",
    "artifact_infos",
    "loader_token_hashes"
  ],
  "title": "ModSettings",
  "type": "object"
}